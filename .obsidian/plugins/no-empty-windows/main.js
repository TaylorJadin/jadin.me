/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoEmptyWindows
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  unpin: true,
  allowEmpty: true
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Unpin tabs").setDesc("Enable to unpin pinned tabs instead of closing them directly.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.unpin).onChange(async (value) => {
        this.plugin.settings.unpin = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Allow empty tabs").setDesc(
      "Disable to close the window immediately when the last tab is closed, instead of spawning an empty tab."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.allowEmpty).onChange(async (value) => {
        this.plugin.settings.allowEmpty = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
var NoEmptyWindows = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: "close-tab-or-empty-window",
      name: "Close current tab or empty window",
      callback: () => {
        const workspace = this.app.workspace;
        const leaves = [];
        workspace.iterateAllLeaves((leaf) => {
          leaf.view.navigation && leaves.push(leaf);
        });
        const activeLeaf = workspace.getMostRecentLeaf();
        let activeGroup = activeLeaf.parent;
        switch (true) {
          case (this.settings.unpin && (activeLeaf == null ? void 0 : activeLeaf.getViewState().pinned)):
            activeLeaf.setPinned(false);
            break;
          case (leaves.length === 1 && activeLeaf.view.getViewType() === "empty"):
            activeLeaf.getContainer().win.close();
            break;
          case (leaves.length === 1 && (!this.settings.allowEmpty || this.settings.allowEmpty && activeLeaf.view.getViewType() === "empty")):
            activeLeaf.getContainer().win.close();
            break;
          case (leaves.length > 1 && activeGroup.children.length === 1):
            const relatives = activeGroup.parent.children;
            const activeGroups = relatives.length > 1 ? relatives.filter((child) => child != activeGroup).sort(
              (a, b) => a.children.length - b.children.length
            ) : [...new Set(leaves.map((leaf) => leaf.parent))].filter((group) => group != activeGroup).sort((a, b) => a.children.length - b.children.length);
            activeGroup = activeGroups[0];
            const activeLeaves = activeGroup.children;
            const nextActiveLeaf = activeLeaves[activeGroup.currentTab];
            workspace.setActiveLeaf(nextActiveLeaf, { focus: true });
          default:
            activeLeaf.detach();
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
